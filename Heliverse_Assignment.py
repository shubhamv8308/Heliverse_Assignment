# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LvhUh86Bzkm5yiLBstr0k__xRaj08kH9
"""

import pandas as pd
df=pd.read_csv("/content/drive/MyDrive/WA_Fn-UseC_-HR-Employee-Attrition.csv")

pd.set_option('display.max_columns', None)
df.head()

df.shape

df.isna().sum()

df.info()

df['Attrition'].value_counts()

categorical_columns = df.select_dtypes(include=['object']).columns

print("Categorical columns:")
print(categorical_columns)

unique_value_counts = {}
for column in categorical_columns:
    unique_value_counts[column] = df[column].value_counts()
print("Count of unique values in categorical columns:")
print(unique_value_counts)

from sklearn.preprocessing import LabelEncoder
# Apply label encoding to categorical columns
label_encoders = {}
for column in categorical_columns:
    label_encoders[column] = LabelEncoder()
    df[column] = label_encoders[column].fit_transform(df[column])
df.head()

from sklearn.model_selection import train_test_split

X = df.drop('Attrition', axis=1)  # Features
y = df['Attrition']  # Target variable

# Split the dataset into training and testing sets (80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score
# Instantiate the Logistic Regression model
model = LogisticRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Calculate metrics
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)

print("LR Accuracy:", accuracy)
print("LR Precision:", precision)
print("LR Recall:", recall)

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix
# Calculate confusion matrix
cm = confusion_matrix(y_test, y_pred)

# Define class labels
class_names = ['No', 'Yes']

# Plot confusion matrix
plt.figure(figsize=(8, 6))
sns.set(font_scale=1.4)  # Adjust font size if necessary
sns.heatmap(cm, annot=True, fmt='g', cmap='Blues', xticklabels=class_names, yticklabels=class_names)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

from sklearn import svm
from sklearn.metrics import accuracy_score, precision_score, recall_score
# Instantiate the SVM model
model2 = svm.SVC()

# Train the model
model2.fit(X_train, y_train)

# Make predictions
y_pred2 = model2.predict(X_test)

# Calculate metrics
accuracy2 = accuracy_score(y_test, y_pred2)
precision2 = precision_score(y_test, y_pred2)
recall2 = recall_score(y_test, y_pred2)

print("SVM Accuracy:", accuracy2)
print("SVM Precision:", precision2)
print("SVM Recall:", recall2)

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix
# Calculate confusion matrix
cm = confusion_matrix(y_test, y_pred2)

# Define class labels
class_names = ['No', 'Yes']

# Plot confusion matrix
plt.figure(figsize=(8, 6))
sns.set(font_scale=1.4)  # Adjust font size if necessary
sns.heatmap(cm, annot=True, fmt='g', cmap='Blues', xticklabels=class_names, yticklabels=class_names)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

from sklearn.ensemble import RandomForestClassifier
# Instantiate the Random Forest model
model3 = RandomForestClassifier()

# Train the model
model3.fit(X_train, y_train)

# Make predictions
y_pred3 = model3.predict(X_test)

# Calculate metrics
accuracy3 = accuracy_score(y_test, y_pred3)
precision3 = precision_score(y_test, y_pred3)
recall3 = recall_score(y_test, y_pred3)

print("Accuracy:", accuracy3)
print("Precision:", precision3)
print("Recall:", recall3)

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix
# Calculate confusion matrix
cm = confusion_matrix(y_test, y_pred3)

# Define class labels
class_names = ['No', 'Yes']

# Plot confusion matrix
plt.figure(figsize=(8, 6))
sns.set(font_scale=1.4)  # Adjust font size if necessary
sns.heatmap(cm, annot=True, fmt='g', cmap='Blues', xticklabels=class_names, yticklabels=class_names)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

